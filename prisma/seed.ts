import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
	console.log('üå± Iniciando seed de la base de datos...')

	// Crear tipos de membres√≠a
	const memberships = await Promise.all([
		prisma.membershipTier.upsert({
			where: { name: 'Bronze' },
			update: {},
			create: {
				name: 'Bronze',
				description: 'Membres√≠a b√°sica para disfrutar del cine bajo las estrellas',
				priority: 1,
				price: 15.00,
				benefits: 'Acceso a eventos regulares ‚Ä¢ Reserva con 7 d√≠as de anticipaci√≥n ‚Ä¢ Descuento 5% en snacks',
			},
		}),
		prisma.membershipTier.upsert({
			where: { name: 'Silver' },
			update: {},
			create: {
				name: 'Silver',
				description: 'Membres√≠a intermedia con beneficios adicionales',
				priority: 2,
				price: 25.00,
				benefits: 'Acceso prioritario a eventos ‚Ä¢ Reserva con 14 d√≠as de anticipaci√≥n ‚Ä¢ Descuento 10% en snacks ‚Ä¢ Acceso a eventos especiales',
			},
		}),
		prisma.membershipTier.upsert({
			where: { name: 'Gold' },
			update: {},
			create: {
				name: 'Gold',
				description: 'Membres√≠a premium con todos los beneficios',
				priority: 3,
				price: 40.00,
				benefits: 'Acceso VIP a todos los eventos ‚Ä¢ Reserva con 21 d√≠as de anticipaci√≥n ‚Ä¢ Bebida gratis por evento ‚Ä¢ Descuento 15% en snacks ‚Ä¢ Playlist colaborativa de Spotify ‚Ä¢ Asientos preferenciales',
			},
		}),
	])

	console.log('‚úÖ Membres√≠as creadas:', memberships.map(m => m.name).join(', '))

	// Crear usuario administrador
	const adminPassword = await bcrypt.hash('admin123', 12)
	const admin = await prisma.user.upsert({
		where: { email: 'admin@puffandchill.com' },
		update: {},
		create: {
			email: 'admin@puffandchill.com',
			password: adminPassword,
			name: 'Administrador',
			membershipId: memberships[2].id, // Gold
			isAdmin: true,
		},
	})

	console.log('‚úÖ Usuario administrador creado:', admin.email)

	// Crear usuarios de prueba
	const userPassword = await bcrypt.hash('user123', 12)
	const users = await Promise.all([
		prisma.user.upsert({
			where: { email: 'carlos@test.com' },
			update: {},
			create: {
				email: 'carlos@test.com',
				password: userPassword,
				name: 'Carlos Garc√≠a',
				membershipId: memberships[0].id, // Bronze
			},
		}),
		prisma.user.upsert({
			where: { email: 'maria@test.com' },
			update: {},
			create: {
				email: 'maria@test.com',
				password: userPassword,
				name: 'Mar√≠a L√≥pez',
				membershipId: memberships[1].id, // Silver
			},
		}),
		prisma.user.upsert({
			where: { email: 'ana@test.com' },
			update: {},
			create: {
				email: 'ana@test.com',
				password: userPassword,
				name: 'Ana Rodr√≠guez',
				membershipId: memberships[2].id, // Gold
			},
		}),
	])

	console.log('‚úÖ Usuarios de prueba creados:', users.map(u => u.email).join(', '))

	// Crear productos para el kiosco - AMPLIADO
	const products = await Promise.all([
		// Snacks
		prisma.product.upsert({
			where: { name: 'Palomitas Cl√°sicas' },
			update: {},
			create: {
				name: 'Palomitas Cl√°sicas',
				description: 'Palomitas reci√©n hechas con mantequilla',
				price: 8.50,
				stock: 100,
			},
		}),
		prisma.product.upsert({
			where: { name: 'Palomitas Caramelo' },
			update: {},
			create: {
				name: 'Palomitas Caramelo',
				description: 'Palomitas dulces con caramelo artesanal',
				price: 10.00,
				stock: 75,
			},
		}),
		prisma.product.upsert({
			where: { name: 'Nachos con Queso' },
			update: {},
			create: {
				name: 'Nachos con Queso',
				description: 'Nachos crujientes con salsa de queso',
				price: 12.00,
				stock: 50,
			},
		}),
		prisma.product.upsert({
			where: { name: 'Nachos con Guacamole' },
			update: {},
			create: {
				name: 'Nachos con Guacamole',
				description: 'Nachos crujientes con guacamole fresco',
				price: 14.00,
				stock: 40,
			},
		}),
		prisma.product.upsert({
			where: { name: 'Mix de Frutos Secos' },
			update: {},
			create: {
				name: 'Mix de Frutos Secos',
				description: 'Mezcla premium de almendras, nueces y ar√°ndanos',
				price: 9.50,
				stock: 60,
			},
		}),
		prisma.product.upsert({
			where: { name: 'Chocolate Artesanal' },
			update: {},
			create: {
				name: 'Chocolate Artesanal',
				description: 'Tableta de chocolate 70% cacao',
				price: 7.00,
				stock: 35,
			},
		}),
		// Bebidas Fr√≠as
		prisma.product.upsert({
			where: { name: 'Refresco Cola' },
			update: {},
			create: {
				name: 'Refresco Cola',
				description: 'Bebida refrescante 500ml',
				price: 5.00,
				stock: 80,
			},
		}),
		prisma.product.upsert({
			where: { name: 'Refresco Naranja' },
			update: {},
			create: {
				name: 'Refresco Naranja',
				description: 'Bebida refrescante sabor naranja 500ml',
				price: 5.00,
				stock: 70,
			},
		}),
		prisma.product.upsert({
			where: { name: 'Agua Mineral' },
			update: {},
			create: {
				name: 'Agua Mineral',
				description: 'Agua mineral natural 500ml',
				price: 3.00,
				stock: 120,
			},
		}),
		prisma.product.upsert({
			where: { name: 'Agua Saborizada Lim√≥n' },
			update: {},
			create: {
				name: 'Agua Saborizada Lim√≥n',
				description: 'Agua saborizada natural sabor lim√≥n 500ml',
				price: 4.50,
				stock: 85,
			},
		}),
		prisma.product.upsert({
			where: { name: 'Jugo Natural Naranja' },
			update: {},
			create: {
				name: 'Jugo Natural Naranja',
				description: 'Jugo de naranja reci√©n exprimido 400ml',
				price: 8.00,
				stock: 45,
			},
		}),
		prisma.product.upsert({
			where: { name: 'Smoothie de Frutas' },
			update: {},
			create: {
				name: 'Smoothie de Frutas',
				description: 'Batido natural de frutas mixtas 350ml',
				price: 12.50,
				stock: 30,
			},
		}),
		// Bebidas Calientes
		prisma.product.upsert({
			where: { name: 'Caf√© Americano' },
			update: {},
			create: {
				name: 'Caf√© Americano',
				description: 'Caf√© americano reci√©n molido',
				price: 6.00,
				stock: 90,
			},
		}),
		prisma.product.upsert({
			where: { name: 'Cappuccino' },
			update: {},
			create: {
				name: 'Cappuccino',
				description: 'Cappuccino con leche espumada',
				price: 8.50,
				stock: 65,
			},
		}),
		prisma.product.upsert({
			where: { name: 'T√© Chai Latte' },
			update: {},
			create: {
				name: 'T√© Chai Latte',
				description: 'T√© chai especiado con leche cremosa',
				price: 9.00,
				stock: 40,
			},
		}),
		prisma.product.upsert({
			where: { name: 'Chocolate Caliente' },
			update: {},
			create: {
				name: 'Chocolate Caliente',
				description: 'Chocolate caliente artesanal con marshmallows',
				price: 10.00,
				stock: 50,
			},
		}),
	])

	console.log('‚úÖ Productos creados:', products.length, 'productos')

	// Crear c√≥digos de descuento - AMPLIADO
	const discounts = await Promise.all([
		prisma.discount.upsert({
			where: { code: 'WELCOME10' },
			update: {},
			create: {
				code: 'WELCOME10',
				description: 'Descuento de bienvenida para nuevos miembros',
				percentage: 10.0,
				validFrom: new Date(),
				validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 d√≠as
			},
		}),
		prisma.discount.upsert({
			where: { code: 'GOLD20' },
			update: {},
			create: {
				code: 'GOLD20',
				description: 'Descuento exclusivo para miembros Gold',
				percentage: 20.0,
				membershipTierId: memberships[2].id, // Solo para Gold
				validFrom: new Date(),
				validUntil: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000), // 60 d√≠as
			},
		}),
		prisma.discount.upsert({
			where: { code: 'SILVER15' },
			update: {},
			create: {
				code: 'SILVER15',
				description: 'Descuento especial para miembros Silver',
				percentage: 15.0,
				membershipTierId: memberships[1].id, // Solo para Silver
				validFrom: new Date(),
				validUntil: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000), // 45 d√≠as
			},
		}),
		prisma.discount.upsert({
			where: { code: 'WEEKEND25' },
			update: {},
			create: {
				code: 'WEEKEND25',
				description: 'Descuento especial de fin de semana',
				percentage: 25.0,
				validFrom: new Date(),
				validUntil: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 d√≠as
			},
		}),
		prisma.discount.upsert({
			where: { code: 'BRONZE5' },
			update: {},
			create: {
				code: 'BRONZE5',
				description: 'Descuento para miembros Bronze',
				percentage: 5.0,
				membershipTierId: memberships[0].id, // Solo para Bronze
				validFrom: new Date(),
				validUntil: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 d√≠as
			},
		}),
		prisma.discount.upsert({
			where: { code: 'FIRSTBUY' },
			update: {},
			create: {
				code: 'FIRSTBUY',
				description: 'Descuento para primera compra',
				percentage: 12.0,
				validFrom: new Date(),
				validUntil: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 a√±o
			},
		}),
	])

	console.log('‚úÖ C√≥digos de descuento creados:', discounts.map(d => d.code).join(', '))

	// Crear eventos - AMPLIADO
	const events = await Promise.all([
		prisma.event.upsert({
			where: { title: 'Noche de Cl√°sicos: Casablanca' },
			update: {},
			create: {
				title: 'Noche de Cl√°sicos: Casablanca',
				description: 'Una noche m√°gica bajo las estrellas con uno de los cl√°sicos m√°s queridos del cine. Disfruta de Casablanca en un ambiente √∫nico con audio silencioso de alta calidad.',
				dateTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // En 7 d√≠as
				location: 'Terraza Principal - Puff & Chill',
				category: 'Drama Cl√°sico',
				imdbId: 'tt0034583', // Casablanca en IMDb
				spotifyUri: 'spotify:playlist:37i9dQZF1DX0XUsuxWHRQd',
			},
		}),
		prisma.event.upsert({
			where: { title: 'Ciencia Ficci√≥n: Blade Runner 2049' },
			update: {},
			create: {
				title: 'Ciencia Ficci√≥n: Blade Runner 2049',
				description: 'Sum√©rgete en el futuro dist√≥pico de Blade Runner 2049. Una experiencia visual y sonora que te transportar√° a otro mundo bajo el cielo estrellado.',
				dateTime: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // En 14 d√≠as
				location: 'Terraza Norte - Puff & Chill',
				category: 'Ciencia Ficci√≥n',
				imdbId: 'tt1856101',
				spotifyUri: 'spotify:playlist:37i9dQZF1DX0XUsuxWHRQd',
			},
		}),
		prisma.event.upsert({
			where: { title: 'Comedia Rom√°ntica: La La Land' },
			update: {},
			create: {
				title: 'Comedia Rom√°ntica: La La Land',
				description: 'Una noche de romance y m√∫sica con La La Land. D√©jate envolver por la magia de Los √Ångeles y sus sue√±os bajo las estrellas.',
				dateTime: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000), // En 21 d√≠as
				location: 'Jard√≠n Sur - Puff & Chill',
				category: 'Musical Romance',
				imdbId: 'tt3783958',
				spotifyUri: 'spotify:playlist:37i9dQZF1DX0XUsuxWHRQd',
			},
		}),
		prisma.event.upsert({
			where: { title: 'Thriller Psicol√≥gico: El Cisne Negro' },
			update: {},
			create: {
				title: 'Thriller Psicol√≥gico: El Cisne Negro',
				description: 'Una experiencia intensa con Natalie Portman en Black Swan. Perfecta para una noche de suspense bajo la luna llena.',
				dateTime: new Date(Date.now() + 28 * 24 * 60 * 60 * 1000), // En 28 d√≠as
				location: 'Terraza Principal - Puff & Chill',
				category: 'Thriller Psicol√≥gico',
				imdbId: 'tt0947798',
				spotifyUri: 'spotify:playlist:37i9dQZF1DX0XUsuxWHRQd',
			},
		}),
		prisma.event.upsert({
			where: { title: 'Animaci√≥n: El Viaje de Chihiro' },
			update: {},
			create: {
				title: 'Animaci√≥n: El Viaje de Chihiro',
				description: 'Una noche familiar con la obra maestra de Studio Ghibli. Magia, aventura y hermosos paisajes bajo el cielo nocturno.',
				dateTime: new Date(Date.now() + 35 * 24 * 60 * 60 * 1000), // En 35 d√≠as
				location: 'Jard√≠n Central - Puff & Chill',
				category: 'Animaci√≥n Familiar',
				imdbId: 'tt0245429',
				spotifyUri: 'spotify:playlist:37i9dQZF1DX0XUsuxWHRQd',
			},
		}),
		prisma.event.upsert({
			where: { title: 'Terror Cl√°sico: El Exorcista' },
			update: {},
			create: {
				title: 'Terror Cl√°sico: El Exorcista',
				description: 'Una noche de terror cl√°sico con El Exorcista. Solo para valientes que quieran vivir una experiencia escalofriante bajo las estrellas.',
				dateTime: new Date(Date.now() + 42 * 24 * 60 * 60 * 1000), // En 42 d√≠as
				location: 'Terraza Norte - Puff & Chill',
				category: 'Terror Cl√°sico',
				imdbId: 'tt0070047',
				spotifyUri: 'spotify:playlist:37i9dQZF1DX0XUsuxWHRQd',
			},
		}),
		prisma.event.upsert({
			where: { title: 'Acci√≥n: Mad Max Fury Road' },
			update: {},
			create: {
				title: 'Acci√≥n: Mad Max Fury Road',
				description: 'Adrenalina pura con Mad Max: Fury Road. Una experiencia explosiva de acci√≥n en el desierto bajo el cielo estrellado.',
				dateTime: new Date(Date.now() + 49 * 24 * 60 * 60 * 1000), // En 49 d√≠as
				location: 'Terraza Principal - Puff & Chill',
				category: 'Acci√≥n',
				imdbId: 'tt1392190',
				spotifyUri: 'spotify:playlist:37i9dQZF1DX0XUsuxWHRQd',
			},
		}),
		prisma.event.upsert({
			where: { title: 'Drama Hist√≥rico: 1917' },
			update: {},
			create: {
				title: 'Drama Hist√≥rico: 1917',
				description: 'Una obra maestra cinematogr√°fica sobre la Primera Guerra Mundial. Una experiencia emotiva e inmersiva bajo las estrellas.',
				dateTime: new Date(Date.now() + 56 * 24 * 60 * 60 * 1000), // En 56 d√≠as
				location: 'Jard√≠n Sur - Puff & Chill',
				category: 'Drama B√©lico',
				imdbId: 'tt8579674',
				spotifyUri: 'spotify:playlist:37i9dQZF1DX0XUsuxWHRQd',
			},
		}),
	])

	console.log('‚úÖ Eventos creados:', events.length, 'eventos')

	// Crear asientos para todos los eventos
	let totalSeats = 0
	for (const event of events) {
		const seats = []
		const tiers = ['Bronze', 'Silver', 'Gold']
		
		for (let i = 1; i <= 30; i++) {
			const tier = tiers[Math.floor((i - 1) / 10)] // 10 asientos por tier
			seats.push({
				eventId: event.id,
				seatNumber: i,
				tier: tier,
			})
		}

		await prisma.seat.createMany({
			data: seats,
			skipDuplicates: true,
		})
		totalSeats += seats.length
	}

	console.log('‚úÖ Asientos creados:', totalSeats, 'asientos total')

	// Crear algunas reservas de ejemplo
	const casablancaEvent = events.find(e => e.title.includes('Casablanca'))
	const bladeRunnerEvent = events.find(e => e.title.includes('Blade Runner'))
	
	if (casablancaEvent && bladeRunnerEvent) {
		const casablancaSeats = await prisma.seat.findMany({
			where: { eventId: casablancaEvent.id },
			take: 5
		})
		
		const bladeRunnerSeats = await prisma.seat.findMany({
			where: { eventId: bladeRunnerEvent.id },
			take: 3
		})

		// Reservas para Casablanca
		const casablancaReservations = await Promise.all([
			prisma.reservation.create({
				data: {
					userId: users[0].id, // Carlos
					eventId: casablancaEvent.id,
					seatId: casablancaSeats[0].id,
					status: 'confirmed',
				}
			}),
			prisma.reservation.create({
				data: {
					userId: users[1].id, // Mar√≠a
					eventId: casablancaEvent.id,
					seatId: casablancaSeats[1].id,
					status: 'confirmed',
				}
			}),
			prisma.reservation.create({
				data: {
					userId: users[2].id, // Ana
					eventId: casablancaEvent.id,
					seatId: casablancaSeats[2].id,
					status: 'pending',
				}
			}),
		])

		// Reservas para Blade Runner
		const bladeRunnerReservations = await Promise.all([
			prisma.reservation.create({
				data: {
					userId: users[1].id, // Mar√≠a
					eventId: bladeRunnerEvent.id,
					seatId: bladeRunnerSeats[0].id,
					status: 'confirmed',
				}
			}),
			prisma.reservation.create({
				data: {
					userId: users[2].id, // Ana
					eventId: bladeRunnerEvent.id,
					seatId: bladeRunnerSeats[1].id,
					status: 'pending',
				}
			}),
		])

		console.log('‚úÖ Reservas creadas:', casablancaReservations.length + bladeRunnerReservations.length, 'reservas')

		// Marcar asientos como reservados
		await prisma.seat.updateMany({
			where: {
				id: {
					in: [...casablancaSeats.slice(0, 3), ...bladeRunnerSeats.slice(0, 2)].map(s => s.id)
				}
			},
			data: { isReserved: true }
		})
	}

	// Crear √≥rdenes de ejemplo con items
	const sampleProducts = products.slice(0, 16) // Tomar todos los productos para las √≥rdenes

	const orders = await Promise.all([
		// Orden 1 - Carlos
		prisma.order.create({
			data: {
				userId: users[0].id,
				status: 'paid',
				totalAmount: 25.50,
				items: {
					create: [
						{
							productId: sampleProducts[0].id, // Palomitas Cl√°sicas
							quantity: 2,
							price: 8.50,
						},
						{
							productId: sampleProducts[6].id, // Refresco Cola
							quantity: 2,
							price: 5.00,
						},
					]
				}
			}
		}),
		// Orden 2 - Mar√≠a
		prisma.order.create({
			data: {
				userId: users[1].id,
				status: 'paid',
				totalAmount: 34.50,
				items: {
					create: [
						{
							productId: sampleProducts[2].id, // Nachos con Queso
							quantity: 1,
							price: 12.00,
						},
						{
							productId: sampleProducts[10].id, // Jugo Natural Naranja
							quantity: 2,
							price: 8.00,
						},
						{
							productId: sampleProducts[5].id, // Chocolate Artesanal
							quantity: 1,
							price: 7.00,
						},
					]
				}
			}
		}),
		// Orden 3 - Ana
		prisma.order.create({
			data: {
				userId: users[2].id,
				status: 'pending',
				totalAmount: 42.00,
				items: {
					create: [
						{
							productId: sampleProducts[1].id, // Palomitas Caramelo
							quantity: 1,
							price: 10.00,
						},
						{
							productId: sampleProducts[11].id, // Smoothie de Frutas
							quantity: 2,
							price: 12.50,
						},
						{
							productId: sampleProducts[4].id, // Mix de Frutos Secos
							quantity: 1,
							price: 9.50,
						},
					]
				}
			}
		}),
		// Orden 4 - Carlos (segunda orden)
		prisma.order.create({
			data: {
				userId: users[0].id,
				status: 'paid',
				totalAmount: 28.00,
				items: {
					create: [
						{
							productId: sampleProducts[3].id, // Nachos con Guacamole
							quantity: 1,
							price: 14.00,
						},
						{
							productId: sampleProducts[12].id, // Caf√© Americano
							quantity: 1,
							price: 6.00,
						},
						{
							productId: sampleProducts[8].id, // Agua Mineral
							quantity: 2,
							price: 3.00,
						},
					]
				}
			}
		}),
	])

	console.log('‚úÖ √ìrdenes creadas:', orders.length, '√≥rdenes')

	// Crear pagos para las √≥rdenes pagadas
	const paidOrders = orders.filter(order => order.status === 'paid')
	const payments = await Promise.all(
		paidOrders.map((order, index) => 
			prisma.payment.create({
				data: {
					orderId: order.id,
					amount: order.totalAmount,
					status: 'paid',
					paymentDate: new Date(Date.now() - (index + 1) * 24 * 60 * 60 * 1000), // Pagos en d√≠as pasados
					provider: 'Mercado Pago',
					providerRef: `MP_${Math.random().toString(36).substring(2, 15).toUpperCase()}`,
				}
			})
		)
	)

	console.log('‚úÖ Pagos creados:', payments.length, 'pagos')

	// Actualizar stock de productos vendidos
	await prisma.product.update({
		where: { id: sampleProducts[0].id }, // Palomitas Cl√°sicas
		data: { stock: { decrement: 2 } }
	})
	await prisma.product.update({
		where: { id: sampleProducts[6].id }, // Refresco Cola
		data: { stock: { decrement: 2 } }
	})
	await prisma.product.update({
		where: { id: sampleProducts[2].id }, // Nachos con Queso
		data: { stock: { decrement: 1 } }
	})
	await prisma.product.update({
		where: { id: sampleProducts[10].id }, // Jugo Natural Naranja
		data: { stock: { decrement: 2 } }
	})
	await prisma.product.update({
		where: { id: sampleProducts[5].id }, // Chocolate Artesanal
		data: { stock: { decrement: 1 } }
	})
	await prisma.product.update({
		where: { id: sampleProducts[3].id }, // Nachos con Guacamole
		data: { stock: { decrement: 1 } }
	})
	await prisma.product.update({
		where: { id: sampleProducts[12].id }, // Caf√© Americano
		data: { stock: { decrement: 1 } }
	})
	await prisma.product.update({
		where: { id: sampleProducts[8].id }, // Agua Mineral
		data: { stock: { decrement: 2 } }
	})

	console.log('‚úÖ Stock de productos actualizado')

	console.log('üéâ Seed completado exitosamente!')
	console.log('\nüìä Resumen de datos creados:')
	console.log(`üë• Usuarios: ${users.length + 1} (incluyendo admin)`)
	console.log(`üé≠ Membres√≠as: ${memberships.length}`)
	console.log(`üé¨ Eventos: ${events.length}`)
	console.log(`ü™ë Asientos: ${totalSeats}`)
	console.log(`üçø Productos: ${products.length}`)
	console.log(`üè∑Ô∏è Descuentos: ${discounts.length}`)
	console.log(`üìã √ìrdenes: ${orders.length}`)
	console.log(`üí≥ Pagos: ${payments.length}`)
	console.log('\nüìã Credenciales de prueba:')
	console.log('üë§ Admin: admin@puffandchill.com / admin123')
	console.log('üë§ Usuario Bronze: carlos@test.com / user123')
	console.log('üë§ Usuario Silver: maria@test.com / user123')
	console.log('üë§ Usuario Gold: ana@test.com / user123')
}

main()
	.catch((e) => {
		console.error('‚ùå Error durante el seed:', e)
		process.exit(1)
	})
	.finally(async () => {
		await prisma.$disconnect()
	}) 